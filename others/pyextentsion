doc = FreeCAD.newDocument()

box = doc.addObject("Part::Box", "myBox")
doc.recompute()
box.Height


myvec = FreeCAD.Vector(2, 0, 0)
myvec.x
myvec.y
othervec = FreeCAD.Vector(0, 3, 0)
sumvec = myvec.add(othervec)


box.Placement
box.Placement.Base
box.Placement.Base = sumvec

otherpla = FreeCAD.Placement()
box.Placement = otherpla

vo = box.ViewObject


vo.Transparency = 80
vo.hide()
vo.show()



doc.supportedTypes()


import Mesh
mymesh = Mesh.createSphere()
mymesh.Facets
mymesh.Points

meshobj = doc.addObject("Mesh::Feature", "MyMesh")
meshobj.Mesh = mymesh
doc.recompute()



import Part
myshape = Part.makeSphere(10)
myshape.Volume
myshape.Area

shapeobj = doc.addObject("Part::Feature", "MyShape")
shapeobj.Shape = myshape
doc.recompute()




import Draft
rec = Draft.makeRectangle(5, 2)
mvec = FreeCAD.Vector(4, 4, 0)
Draft.move(rec, mvec)
Draft.move(box, mvec)




from PySide import QtGui
QtGui.QMessageBox.information(None, "Apollo program", "Houston, we have a problem")




### positionBySupport

 1import FreeCAD as App
 2import Part
 3
 4
 5class Box():
 6    """
 7    Simple Custom Box Object
 8    See Also:
 9        https://wiki.freecadweb.org/FeaturePython_Objects
10    """
11
12    def __init__(self, obj):
13        """
14        Constructor
15        Arguments
16        ---------
17        - obj: an existing document object or an object created with FreeCAD.Document.addObject('Part::FeaturePython', '{name}').
18        """
19
20        self.Type = 'Box'
21
22        obj.Proxy = self
23        obj.addProperty('App::PropertyLength', 'Length',
24                        'Dimensions', 'Box length').Length = 10.0
25        obj.addProperty('App::PropertyLength', 'Width',
26                        'Dimensions', 'Box width').Width = 10.0
27        obj.addProperty('App::PropertyLength', 'Height',
28                        'Dimensions', 'Box height').Height = 10.0
29
30        # Needed to make this object "attachable",
31        # or able to attach parameterically to other objects
32        obj.addExtension('Part::AttachExtensionPython', obj)
33
34    def execute(self, obj):
35        """
36        Called on document recompute
37        """
38        # Needed to update position when attached-to object changes position.
39        # Reposition object based on Support, MapMode and MapPathParameter properties.
40        # Returns True if attachment calculation was successful, False if object is not attached and Placement wasn't updated,
41        obj.positionBySupport()
42
43        obj.Shape = Part.makeBox(obj.Length, obj.Width, obj.Height)
44
45
46def create_box(obj_name, document):
47    """
48    Create a Box.
49    """
50    obj = document.addObject('Part::FeaturePython', obj_name)
51    Box(obj)
52    obj.ViewObject.Proxy = 0  # Mandatory unless ViewProvider is coded
53    return obj
54
55
56document = App.ActiveDocument
57if document is None:
58    document = App.newDocument('Part Attachment Example')
59
60box = create_box('CustomBox', document)
61document.recompute()




## Saving all attributes


# various_states.py
class VariousStates:
    def __init__(self, obj):
        obj.addProperty("App::PropertyLength", "Length")
        obj.addProperty("App::PropertyArea", "Area")
        obj.Length = 15
        obj.Area = 300
        obj.Proxy = self

        Type = dict()
        Type["Version"] = "Custom"
        Type["Release"] = "production"
        self.Type = Type
        self.Type = "Custom"
        self.ver = "0.18"
        self.color = (0, 0, 1)
        self.width = 2.5

    def execute(self, obj):
        pass



import FreeCAD as App
import various_states

doc = App.newDocument()
doc.FileName = "my_document.FCStd"

obj = doc.addObject("Part::FeaturePython", "Custom")
various_states.VariousStates(obj)

if App.GuiUp:
    obj.ViewObject.Proxy = 1

doc.recompute()
doc.save()



>>> obj = App.ActiveDocument.Custom
>>> print(obj.Proxy)
<various_states.VariousStates object at 0x7f0a899bde10>
>>> print(obj.Proxy.__dict__)
{'Type': {'Version': 'Custom', 'Release': 'production'}, 'ver': '0.18', 'color': [0, 0, 1], 'width': 2.5}




# various_states.py
class CustomStates:
    def __init__(self, obj):
        obj.addProperty("App::PropertyLength", "Length")
        obj.addProperty("App::PropertyArea", "Area")
        obj.Length = 15
        obj.Area = 300
        obj.Proxy = self

        Type = dict()
        Type["Version"] = "Custom"
        Type["Release"] = "production"
        self.Type = Type
        self.ver = "0.18"
        self.color = (0, 0, 1)
        self.width = 2.5

    def execute(self, obj):
        pass

    def __getstate__(self):
        return self.color, self.width

    def __setstate__(self, state):
        self.color = state[0]
        self.width = state[1]


>>> obj2 = App.ActiveDocument.Custom2
>>> print(obj2.Proxy)
<various_states.CustomStates object at 0x7fb399496630>
>>> print(obj2.Proxy.__dict__)
{'color': [0, 0, 1], 'width': 2.5}




class DraftObject:
    def __init__(self, obj, _type):
        self.Type = _type

    def __getstate__(self):
        return self.Type

    def __setstate__(self, state):
        if state:
            self.Type = state


class CustomObject:
    def __init__(self, obj, _type):
        self.Type = _type
        self.version = "0.18"

    def __getstate__(self):
        return self.Type, self.version

    def __setstate__(self, state):
        if state:
            self.Type = state[0]
            self.version = state[1]




class CustomObject:
    def onDocumentRestored(self, obj):
        if hasattr(obj.Proxy, "version") and obj.Proxy.version:
            if obj.Proxy.version == "0.18":
                self.migrate_from_018(obj)

    def migrate_from_018(self, obj):
        ...